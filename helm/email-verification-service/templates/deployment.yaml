{{- if .Values.server.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "email-verification-service.fullname" . }}-server
  labels:
    {{- include "email-verification-service.labels" . | nindent 4 }}
    component: server
spec:
  replicas: {{ .Values.server.replicaCount }}
  selector:
    matchLabels:
      {{- include "email-verification-service.selectorLabels" . | nindent 6 }}
      component: server
  template:
    metadata:
      labels:
        {{- include "email-verification-service.selectorLabels" . | nindent 8 }}
        component: server
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- include "email-verification-service.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "email-verification-service.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}-server
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.server.port }}
              protocol: TCP
          env:
            {{- range $key, $value := .Values.server.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            # PostgreSQL configuration
            - name: RCH__STORAGE__POSTGRES__DB_URL
              {{- if .Values.database.external }}
              value: {{ .Values.database.dsn | quote }}
              {{- else if .Values.database.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.existingSecret }}
                  key: {{ .Values.database.existingSecretKey }}
              {{- else }}
              value: "postgres://{{ .Values.postgresql.auth.username }}:{{ .Values.postgresql.auth.password }}@{{ .Release.Name }}-postgresql:{{ .Values.postgresql.service.port }}/{{ .Values.postgresql.auth.database }}"
              {{- end }}
            # RabbitMQ configuration
            - name: RCH__WORKER__RABBITMQ__URL
              {{- if .Values.messageQueue.external }}
              value: {{ .Values.messageQueue.dsn | quote }}
              {{- else if .Values.messageQueue.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.messageQueue.existingSecret }}
                  key: {{ .Values.messageQueue.existingSecretKey }}
              {{- else }}
              value: "amqp://{{ .Values.rabbitmq.auth.username }}:{{ .Values.rabbitmq.auth.password }}@{{ .Release.Name }}-rabbitmq:{{ .Values.rabbitmq.service.port }}"
              {{- end }}
          resources:
            {{- toYaml .Values.server.resources | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
{{- end }}

{{- if .Values.workers.enabled }}
{{- range $worker, $config := .Values.workers.instances }}
{{- if $config.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $config.name }}
  labels:
    {{- include "email-verification-service.labels" $ | nindent 4 }}
    component: worker
    worker: {{ $config.name }}
spec:
  replicas: {{ $config.replicaCount }}
  selector:
    matchLabels:
      {{- include "email-verification-service.selectorLabels" $ | nindent 6 }}
      component: worker
      worker: {{ $config.name }}
  template:
    metadata:
      labels:
        {{- include "email-verification-service.selectorLabels" $ | nindent 8 }}
        component: worker
        worker: {{ $config.name }}
      {{- with $.Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- include "email-verification-service.imagePullSecrets" $ | nindent 6 }}
      serviceAccountName: {{ include "email-verification-service.serviceAccountName" $ }}
      securityContext:
        {{- toYaml $.Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ $config.name }}
          securityContext:
            {{- toYaml $.Values.securityContext | nindent 12 }}
          image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag | default $.Chart.AppVersion }}"
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ $config.port }}
              protocol: TCP
          env:
            - name: RCH__BACKEND_NAME
              value: {{ $config.name }}
            {{- range $key, $value := $config.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            # PostgreSQL configuration
            - name: RCH__STORAGE__POSTGRES__DB_URL
              {{- if $.Values.database.external }}
              value: {{ $.Values.database.dsn | quote }}
              {{- else if $.Values.database.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.database.existingSecret }}
                  key: {{ $.Values.database.existingSecretKey }}
              {{- else }}
              value: "postgres://{{ $.Values.postgresql.auth.username }}:{{ $.Values.postgresql.auth.password }}@{{ $.Release.Name }}-postgresql:{{ $.Values.postgresql.service.port }}/{{ $.Values.postgresql.auth.database }}"
              {{- end }}
            # RabbitMQ configuration
            - name: RCH__WORKER__RABBITMQ__URL
              {{- if $.Values.messageQueue.external }}
              value: {{ $.Values.messageQueue.dsn | quote }}
              {{- else if $.Values.messageQueue.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.messageQueue.existingSecret }}
                  key: {{ $.Values.messageQueue.existingSecretKey }}
              {{- else }}
              value: "amqp://{{ $.Values.rabbitmq.auth.username }}:{{ $.Values.rabbitmq.auth.password }}@{{ $.Release.Name }}-rabbitmq:{{ $.Values.rabbitmq.service.port }}"
              {{- end }}
            {{- if $config.proxy.enabled }}
            # Worker-specific proxy configuration
            - name: RCH__PROXY__HOST
              {{- if $config.proxy.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ $config.proxy.existingSecret }}
                  key: {{ $config.proxy.existingSecretHostKey }}
              {{- else }}
              value: {{ $config.proxy.host | quote }}
              {{- end }}
            - name: RCH__PROXY__PORT
              {{- if $config.proxy.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ $config.proxy.existingSecret }}
                  key: {{ $config.proxy.existingSecretPortKey }}
              {{- else }}
              value: {{ $config.proxy.port | quote }}
              {{- end }}
            {{- if or $config.proxy.username $config.proxy.existingSecret }}
            - name: RCH__PROXY__USERNAME
              {{- if $config.proxy.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ $config.proxy.existingSecret }}
                  key: {{ $config.proxy.existingSecretUsernameKey }}
              {{- else }}
              value: {{ $config.proxy.username | quote }}
              {{- end }}
            {{- end }}
            {{- if or $config.proxy.password $config.proxy.existingSecret }}
            - name: RCH__PROXY__PASSWORD
              {{- if $config.proxy.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ $config.proxy.existingSecret }}
                  key: {{ $config.proxy.existingSecretPasswordKey }}
              {{- else }}
              value: {{ $config.proxy.password | quote }}
              {{- end }}
            {{- end }}
            {{- end }}
          resources:
            {{- toYaml $config.resources | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
{{- end }}
{{- end }}
{{- end }}
