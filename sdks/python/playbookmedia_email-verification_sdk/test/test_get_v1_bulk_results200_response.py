# coding: utf-8

"""
    Reacher

    ### What is Reacher?  Reacher is a robust, open-source email verification API service available as both a SaaS and self-hosted solution.

    The version of the OpenAPI document: 0.10.0
    Contact: amaury@reacher.email
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from playbookmedia_email-verification_sdk.models.get_v1_bulk_results200_response import GetV1BulkResults200Response

class TestGetV1BulkResults200Response(unittest.TestCase):
    """GetV1BulkResults200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetV1BulkResults200Response:
        """Test GetV1BulkResults200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetV1BulkResults200Response`
        """
        model = GetV1BulkResults200Response()
        if include_optional:
            return GetV1BulkResults200Response(
                results = playbookmedia_email-verification_sdk.models.check_email_output.CheckEmailOutput(
                    input = '', 
                    is_reachable = 'invalid', 
                    misc = null, 
                    mx = null, 
                    smtp = null, 
                    syntax = playbookmedia_email-verification_sdk.models.syntax_details.SyntaxDetails(
                        domain = '', 
                        is_valid_syntax = True, 
                        username = '', ), 
                    debug = playbookmedia_email-verification_sdk.models.debug_details.DebugDetails(
                        start_time = '', 
                        end_time = '', 
                        duration = playbookmedia_email-verification_sdk.models.duration.Duration(
                            secs = 1.337, 
                            nanos = 1.337, ), 
                        server_name = '', 
                        smtp = playbookmedia_email-verification_sdk.models.debug_details_smtp.DebugDetailsSmtp(
                            verif_method = playbookmedia_email-verification_sdk.models.verif_method.VerifMethod(
                                type = 'Smtp', ), ), ), )
            )
        else:
            return GetV1BulkResults200Response(
                results = playbookmedia_email-verification_sdk.models.check_email_output.CheckEmailOutput(
                    input = '', 
                    is_reachable = 'invalid', 
                    misc = null, 
                    mx = null, 
                    smtp = null, 
                    syntax = playbookmedia_email-verification_sdk.models.syntax_details.SyntaxDetails(
                        domain = '', 
                        is_valid_syntax = True, 
                        username = '', ), 
                    debug = playbookmedia_email-verification_sdk.models.debug_details.DebugDetails(
                        start_time = '', 
                        end_time = '', 
                        duration = playbookmedia_email-verification_sdk.models.duration.Duration(
                            secs = 1.337, 
                            nanos = 1.337, ), 
                        server_name = '', 
                        smtp = playbookmedia_email-verification_sdk.models.debug_details_smtp.DebugDetailsSmtp(
                            verif_method = playbookmedia_email-verification_sdk.models.verif_method.VerifMethod(
                                type = 'Smtp', ), ), ), ),
        )
        """

    def testGetV1BulkResults200Response(self):
        """Test GetV1BulkResults200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
