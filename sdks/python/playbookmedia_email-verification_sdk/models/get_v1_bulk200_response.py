# coding: utf-8

"""
    Reacher

    ### What is Reacher?  Reacher is a robust, open-source email verification API service available as both a SaaS and self-hosted solution.

    The version of the OpenAPI document: 0.10.0
    Contact: amaury@reacher.email
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from playbookmedia_email-verification_sdk.models.get_v1_bulk200_response_summary import GetV1Bulk200ResponseSummary
from typing import Optional, Set
from typing_extensions import Self

class GetV1Bulk200Response(BaseModel):
    """
    GetV1Bulk200Response
    """ # noqa: E501
    job_id: StrictInt
    created_at: datetime = Field(description="The date and time when the bulk verification job was created.")
    finished_at: Optional[datetime] = Field(default=None, description="If the bulk verification job is completed, the date and time when it was finished.")
    total_records: StrictInt = Field(description="The number of emails to verify in the bulk verification job.")
    total_processed: StrictInt = Field(description="The number of emails that have been verified at the time of the query.")
    summary: GetV1Bulk200ResponseSummary
    job_status: StrictStr = Field(description="The status of the job, either \"Running\" or \"Completed\".")
    __properties: ClassVar[List[str]] = ["job_id", "created_at", "finished_at", "total_records", "total_processed", "summary", "job_status"]

    @field_validator('job_status')
    def job_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Running', 'Completed']):
            raise ValueError("must be one of enum values ('Running', 'Completed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetV1Bulk200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict['summary'] = self.summary.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetV1Bulk200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "job_id": obj.get("job_id"),
            "created_at": obj.get("created_at"),
            "finished_at": obj.get("finished_at"),
            "total_records": obj.get("total_records"),
            "total_processed": obj.get("total_processed"),
            "summary": GetV1Bulk200ResponseSummary.from_dict(obj["summary"]) if obj.get("summary") is not None else None,
            "job_status": obj.get("job_status")
        })
        return _obj


