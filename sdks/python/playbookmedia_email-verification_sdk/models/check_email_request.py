# coding: utf-8

"""
    Reacher

    ### What is Reacher?  Reacher is a robust, open-source email verification API service available as both a SaaS and self-hosted solution.

    The version of the OpenAPI document: 0.10.0
    Contact: amaury@reacher.email
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from playbookmedia_email-verification_sdk.models.check_email_input_proxy import CheckEmailInputProxy
from playbookmedia_email-verification_sdk.models.gmail_verif_method import GmailVerifMethod
from playbookmedia_email-verification_sdk.models.hotmail_b2_b_verif_method import HotmailB2BVerifMethod
from playbookmedia_email-verification_sdk.models.hotmail_b2_c_verif_method import HotmailB2CVerifMethod
from playbookmedia_email-verification_sdk.models.yahoo_verif_method import YahooVerifMethod
from typing import Optional, Set
from typing_extensions import Self

class CheckEmailRequest(BaseModel):
    """
    A request object to perform an email verification. The `to_email` field is required, all other fields are optional.
    """ # noqa: E501
    from_email: Optional[StrictStr] = Field(default=None, description="In the SMTP connection, the FROM email address.")
    to_email: StrictStr = Field(description="The email address to check.")
    hello_name: Optional[StrictStr] = Field(default=None, description="In the SMTP connection, the EHLO hostname.")
    proxy: Optional[CheckEmailInputProxy] = None
    smtp_port: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="SMTP port to use for email validation. Defaults to 25, but 465, 587, and 2525 are sometimes also used.")
    gmail_verif_method: Optional[GmailVerifMethod] = None
    hotmailb2b_verif_method: Optional[HotmailB2BVerifMethod] = None
    hotmailb2c_verif_method: Optional[HotmailB2CVerifMethod] = None
    yahoo_verif_method: Optional[YahooVerifMethod] = None
    check_gravatar: Optional[StrictBool] = Field(default=None, description="Whether to check if a Gravatar image exists for the given email.")
    __properties: ClassVar[List[str]] = ["from_email", "to_email", "hello_name", "proxy", "smtp_port", "gmail_verif_method", "hotmailb2b_verif_method", "hotmailb2c_verif_method", "yahoo_verif_method", "check_gravatar"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckEmailRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of proxy
        if self.proxy:
            _dict['proxy'] = self.proxy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckEmailRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "from_email": obj.get("from_email"),
            "to_email": obj.get("to_email"),
            "hello_name": obj.get("hello_name"),
            "proxy": CheckEmailInputProxy.from_dict(obj["proxy"]) if obj.get("proxy") is not None else None,
            "smtp_port": obj.get("smtp_port"),
            "gmail_verif_method": obj.get("gmail_verif_method"),
            "hotmailb2b_verif_method": obj.get("hotmailb2b_verif_method"),
            "hotmailb2c_verif_method": obj.get("hotmailb2c_verif_method"),
            "yahoo_verif_method": obj.get("yahoo_verif_method"),
            "check_gravatar": obj.get("check_gravatar")
        })
        return _obj


