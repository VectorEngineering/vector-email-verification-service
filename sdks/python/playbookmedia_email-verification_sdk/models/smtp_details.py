# coding: utf-8

"""
    Reacher

    ### What is Reacher?  Reacher is a robust, open-source email verification API service available as both a SaaS and self-hosted solution.

    The version of the OpenAPI document: 0.10.0
    Contact: amaury@reacher.email
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class SmtpDetails(BaseModel):
    """
    Results from SMTP connection attempts to the mail server.
    """ # noqa: E501
    can_connect_smtp: StrictBool = Field(description="Indicates if the mail exchanger can be contacted successfully.")
    has_full_inbox: StrictBool = Field(description="Indicates if the mailbox is full.")
    is_catch_all: StrictBool = Field(description="Indicates if the email address is a catch-all address.")
    is_deliverable: StrictBool = Field(description="Indicates if an email sent to this address is deliverable.")
    is_disabled: StrictBool = Field(description="Indicates if the email address has been disabled by the provider.")
    __properties: ClassVar[List[str]] = ["can_connect_smtp", "has_full_inbox", "is_catch_all", "is_deliverable", "is_disabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SmtpDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SmtpDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "can_connect_smtp": obj.get("can_connect_smtp"),
            "has_full_inbox": obj.get("has_full_inbox"),
            "is_catch_all": obj.get("is_catch_all"),
            "is_deliverable": obj.get("is_deliverable"),
            "is_disabled": obj.get("is_disabled")
        })
        return _obj


