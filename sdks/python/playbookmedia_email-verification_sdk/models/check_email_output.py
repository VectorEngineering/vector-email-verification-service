# coding: utf-8

"""
    Reacher

    ### What is Reacher?  Reacher is a robust, open-source email verification API service available as both a SaaS and self-hosted solution.

    The version of the OpenAPI document: 0.10.0
    Contact: amaury@reacher.email
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from playbookmedia_email-verification_sdk.models.check_email_output_misc import CheckEmailOutputMisc
from playbookmedia_email-verification_sdk.models.check_email_output_mx import CheckEmailOutputMx
from playbookmedia_email-verification_sdk.models.check_email_output_smtp import CheckEmailOutputSmtp
from playbookmedia_email-verification_sdk.models.debug_details import DebugDetails
from playbookmedia_email-verification_sdk.models.reachable import Reachable
from playbookmedia_email-verification_sdk.models.syntax_details import SyntaxDetails
from typing import Optional, Set
from typing_extensions import Self

class CheckEmailOutput(BaseModel):
    """
    The result of the email verification process.
    """ # noqa: E501
    input: StrictStr = Field(description="The email address that was verified.")
    is_reachable: Reachable
    misc: CheckEmailOutputMisc
    mx: CheckEmailOutputMx
    smtp: CheckEmailOutputSmtp
    syntax: SyntaxDetails
    debug: Optional[DebugDetails] = None
    __properties: ClassVar[List[str]] = ["input", "is_reachable", "misc", "mx", "smtp", "syntax", "debug"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckEmailOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of misc
        if self.misc:
            _dict['misc'] = self.misc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mx
        if self.mx:
            _dict['mx'] = self.mx.to_dict()
        # override the default output from pydantic by calling `to_dict()` of smtp
        if self.smtp:
            _dict['smtp'] = self.smtp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of syntax
        if self.syntax:
            _dict['syntax'] = self.syntax.to_dict()
        # override the default output from pydantic by calling `to_dict()` of debug
        if self.debug:
            _dict['debug'] = self.debug.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckEmailOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "input": obj.get("input"),
            "is_reachable": obj.get("is_reachable"),
            "misc": CheckEmailOutputMisc.from_dict(obj["misc"]) if obj.get("misc") is not None else None,
            "mx": CheckEmailOutputMx.from_dict(obj["mx"]) if obj.get("mx") is not None else None,
            "smtp": CheckEmailOutputSmtp.from_dict(obj["smtp"]) if obj.get("smtp") is not None else None,
            "syntax": SyntaxDetails.from_dict(obj["syntax"]) if obj.get("syntax") is not None else None,
            "debug": DebugDetails.from_dict(obj["debug"]) if obj.get("debug") is not None else None
        })
        return _obj


