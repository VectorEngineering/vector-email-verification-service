/* tslint:disable */
/* eslint-disable */
/**
 * Reacher
 * ### What is Reacher?  Reacher is a robust, open-source email verification API service available as both a SaaS and self-hosted solution.
 *
 * The version of the OpenAPI document: 0.10.0
 * Contact: amaury@reacher.email
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CheckEmailOutput,
  CheckEmailRequest,
  GetV1Bulk200Response,
  GetV1BulkResults200Response,
  PostV1Bulk200Response,
  PostV1BulkRequest,
} from '../models/index';
import {
    CheckEmailOutputFromJSON,
    CheckEmailOutputToJSON,
    CheckEmailRequestFromJSON,
    CheckEmailRequestToJSON,
    GetV1Bulk200ResponseFromJSON,
    GetV1Bulk200ResponseToJSON,
    GetV1BulkResults200ResponseFromJSON,
    GetV1BulkResults200ResponseToJSON,
    PostV1Bulk200ResponseFromJSON,
    PostV1Bulk200ResponseToJSON,
    PostV1BulkRequestFromJSON,
    PostV1BulkRequestToJSON,
} from '../models/index';

export interface GetV1BulkRequest {
    job_id: number;
}

export interface GetV1BulkResultsRequest {
    job_id: string;
    limit?: number;
    offset?: number;
}

export interface PostV0CheckEmailRequest {
    Authorization: string;
    CheckEmailRequest?: CheckEmailRequest;
}

export interface PostV1BulkOperationRequest {
    PostV1BulkRequest?: PostV1BulkRequest;
}

export interface PostV1CheckEmailRequest {
    CheckEmailRequest?: CheckEmailRequest;
}

/**
 * DefaultApi - interface
 * 
 * @export
 * @interface DefaultApiInterface
 */
export interface DefaultApiInterface {
    /**
     * Retrieve the progress of a bulk verification job.
     * @summary /v1/bulk/{job_id}
     * @param {number} job_id The unique bulk verification job ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getV1BulkRaw(requestParameters: GetV1BulkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetV1Bulk200Response>>;

    /**
     * Retrieve the progress of a bulk verification job.
     * /v1/bulk/{job_id}
     */
    getV1Bulk(requestParameters: GetV1BulkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetV1Bulk200Response>;

    /**
     * Retrieve the results of a bulk verification job. This endpoint will return an error if the job is still running. Please query `GET /v1/bulk/{job_id}` first to check the job\'s progress.
     * @summary Retrieve bulk verification results
     * @param {string} job_id The unique bulk verification job ID
     * @param {number} [limit] The number of results to return.
     * @param {number} [offset] The offset from which to return the results, equivalent to the number of elements in the array to skip.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getV1BulkResultsRaw(requestParameters: GetV1BulkResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetV1BulkResults200Response>>;

    /**
     * Retrieve the results of a bulk verification job. This endpoint will return an error if the job is still running. Please query `GET /v1/bulk/{job_id}` first to check the job\'s progress.
     * Retrieve bulk verification results
     */
    getV1BulkResults(requestParameters: GetV1BulkResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetV1BulkResults200Response>;

    /**
     * **Sunset notice: please use `/v1/check_email` instead.** Both endpoints accept the same input arguments and return the same output; only their internal implementation differs. Perform a comprehensive verification of an email address. Unlike the `/v1/check_email` endpoint, this endpoint performs an email verification immediately, without considering the Reacher server\'s throttling, concurrency, and other configurations. As such, this endpoint is slightly riskier than `/v1/check_email`, as the Reacher server\'s IP reputation can be impacted if this endpoint is called too frequently.
     * @summary /v0/check_email
     * @param {string} Authorization Your personal Reacher API key
     * @param {CheckEmailRequest} [CheckEmailRequest] Request object containing all parameters necessary for an email verification.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postV0CheckEmailRaw(requestParameters: PostV0CheckEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckEmailOutput>>;

    /**
     * **Sunset notice: please use `/v1/check_email` instead.** Both endpoints accept the same input arguments and return the same output; only their internal implementation differs. Perform a comprehensive verification of an email address. Unlike the `/v1/check_email` endpoint, this endpoint performs an email verification immediately, without considering the Reacher server\'s throttling, concurrency, and other configurations. As such, this endpoint is slightly riskier than `/v1/check_email`, as the Reacher server\'s IP reputation can be impacted if this endpoint is called too frequently.
     * /v0/check_email
     * @deprecated
     */
    postV0CheckEmail(requestParameters: PostV0CheckEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckEmailOutput>;

    /**
     * Initiate a bulk email verification.
     * @summary /v1/bulk
     * @param {PostV1BulkRequest} [PostV1BulkRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postV1BulkRaw(requestParameters: PostV1BulkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostV1Bulk200Response>>;

    /**
     * Initiate a bulk email verification.
     * /v1/bulk
     */
    postV1Bulk(requestParameters: PostV1BulkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostV1Bulk200Response>;

    /**
     * Perform a comprehensive verification of an email address. This endpoint supersedes the previous `/v0/check_email` endpoint, maintaining the same input and output format. Unlike the `/v0/check_email` endpoint, the new `/v1/check_email` endpoint queues the email for verification, and the Reacher server processes the queue based on its configuration settings such as throttle and concurrency.
     * @summary /v1/check_email
     * @param {CheckEmailRequest} [CheckEmailRequest] Request object containing all parameters necessary for an email verification.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postV1CheckEmailRaw(requestParameters: PostV1CheckEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckEmailOutput>>;

    /**
     * Perform a comprehensive verification of an email address. This endpoint supersedes the previous `/v0/check_email` endpoint, maintaining the same input and output format. Unlike the `/v0/check_email` endpoint, the new `/v1/check_email` endpoint queues the email for verification, and the Reacher server processes the queue based on its configuration settings such as throttle and concurrency.
     * /v1/check_email
     */
    postV1CheckEmail(requestParameters: PostV1CheckEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckEmailOutput>;

}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI implements DefaultApiInterface {

    /**
     * Retrieve the progress of a bulk verification job.
     * /v1/bulk/{job_id}
     */
    async getV1BulkRaw(requestParameters: GetV1BulkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetV1Bulk200Response>> {
        if (requestParameters['job_id'] == null) {
            throw new runtime.RequiredError(
                'job_id',
                'Required parameter "job_id" was null or undefined when calling getV1Bulk().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/v1/bulk/{job_id}`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['job_id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetV1Bulk200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the progress of a bulk verification job.
     * /v1/bulk/{job_id}
     */
    async getV1Bulk(requestParameters: GetV1BulkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetV1Bulk200Response> {
        const response = await this.getV1BulkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the results of a bulk verification job. This endpoint will return an error if the job is still running. Please query `GET /v1/bulk/{job_id}` first to check the job\'s progress.
     * Retrieve bulk verification results
     */
    async getV1BulkResultsRaw(requestParameters: GetV1BulkResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetV1BulkResults200Response>> {
        if (requestParameters['job_id'] == null) {
            throw new runtime.RequiredError(
                'job_id',
                'Required parameter "job_id" was null or undefined when calling getV1BulkResults().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/v1/bulk/{job_id}/results`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['job_id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetV1BulkResults200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the results of a bulk verification job. This endpoint will return an error if the job is still running. Please query `GET /v1/bulk/{job_id}` first to check the job\'s progress.
     * Retrieve bulk verification results
     */
    async getV1BulkResults(requestParameters: GetV1BulkResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetV1BulkResults200Response> {
        const response = await this.getV1BulkResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * **Sunset notice: please use `/v1/check_email` instead.** Both endpoints accept the same input arguments and return the same output; only their internal implementation differs. Perform a comprehensive verification of an email address. Unlike the `/v1/check_email` endpoint, this endpoint performs an email verification immediately, without considering the Reacher server\'s throttling, concurrency, and other configurations. As such, this endpoint is slightly riskier than `/v1/check_email`, as the Reacher server\'s IP reputation can be impacted if this endpoint is called too frequently.
     * /v0/check_email
     * @deprecated
     */
    async postV0CheckEmailRaw(requestParameters: PostV0CheckEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckEmailOutput>> {
        if (requestParameters['Authorization'] == null) {
            throw new runtime.RequiredError(
                'Authorization',
                'Required parameter "Authorization" was null or undefined when calling postV0CheckEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['Authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['Authorization']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/v0/check_email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckEmailRequestToJSON(requestParameters['CheckEmailRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckEmailOutputFromJSON(jsonValue));
    }

    /**
     * **Sunset notice: please use `/v1/check_email` instead.** Both endpoints accept the same input arguments and return the same output; only their internal implementation differs. Perform a comprehensive verification of an email address. Unlike the `/v1/check_email` endpoint, this endpoint performs an email verification immediately, without considering the Reacher server\'s throttling, concurrency, and other configurations. As such, this endpoint is slightly riskier than `/v1/check_email`, as the Reacher server\'s IP reputation can be impacted if this endpoint is called too frequently.
     * /v0/check_email
     * @deprecated
     */
    async postV0CheckEmail(requestParameters: PostV0CheckEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckEmailOutput> {
        const response = await this.postV0CheckEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Initiate a bulk email verification.
     * /v1/bulk
     */
    async postV1BulkRaw(requestParameters: PostV1BulkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostV1Bulk200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/v1/bulk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1BulkRequestToJSON(requestParameters['PostV1BulkRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostV1Bulk200ResponseFromJSON(jsonValue));
    }

    /**
     * Initiate a bulk email verification.
     * /v1/bulk
     */
    async postV1Bulk(requestParameters: PostV1BulkOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostV1Bulk200Response> {
        const response = await this.postV1BulkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform a comprehensive verification of an email address. This endpoint supersedes the previous `/v0/check_email` endpoint, maintaining the same input and output format. Unlike the `/v0/check_email` endpoint, the new `/v1/check_email` endpoint queues the email for verification, and the Reacher server processes the queue based on its configuration settings such as throttle and concurrency.
     * /v1/check_email
     */
    async postV1CheckEmailRaw(requestParameters: PostV1CheckEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckEmailOutput>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/v1/check_email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckEmailRequestToJSON(requestParameters['CheckEmailRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckEmailOutputFromJSON(jsonValue));
    }

    /**
     * Perform a comprehensive verification of an email address. This endpoint supersedes the previous `/v0/check_email` endpoint, maintaining the same input and output format. Unlike the `/v0/check_email` endpoint, the new `/v1/check_email` endpoint queues the email for verification, and the Reacher server processes the queue based on its configuration settings such as throttle and concurrency.
     * /v1/check_email
     */
    async postV1CheckEmail(requestParameters: PostV1CheckEmailRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckEmailOutput> {
        const response = await this.postV1CheckEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
