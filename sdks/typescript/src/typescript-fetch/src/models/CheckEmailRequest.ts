/* tslint:disable */
/* eslint-disable */
/**
 * Reacher
 * ### What is Reacher?  Reacher is a robust, open-source email verification API service available as both a SaaS and self-hosted solution.
 *
 * The version of the OpenAPI document: 0.10.0
 * Contact: amaury@reacher.email
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GmailVerifMethod } from './GmailVerifMethod';
import {
    GmailVerifMethodFromJSON,
    GmailVerifMethodFromJSONTyped,
    GmailVerifMethodToJSON,
    GmailVerifMethodToJSONTyped,
} from './GmailVerifMethod';
import type { HotmailB2CVerifMethod } from './HotmailB2CVerifMethod';
import {
    HotmailB2CVerifMethodFromJSON,
    HotmailB2CVerifMethodFromJSONTyped,
    HotmailB2CVerifMethodToJSON,
    HotmailB2CVerifMethodToJSONTyped,
} from './HotmailB2CVerifMethod';
import type { YahooVerifMethod } from './YahooVerifMethod';
import {
    YahooVerifMethodFromJSON,
    YahooVerifMethodFromJSONTyped,
    YahooVerifMethodToJSON,
    YahooVerifMethodToJSONTyped,
} from './YahooVerifMethod';
import type { CheckEmailInputProxy } from './CheckEmailInputProxy';
import {
    CheckEmailInputProxyFromJSON,
    CheckEmailInputProxyFromJSONTyped,
    CheckEmailInputProxyToJSON,
    CheckEmailInputProxyToJSONTyped,
} from './CheckEmailInputProxy';
import type { HotmailB2BVerifMethod } from './HotmailB2BVerifMethod';
import {
    HotmailB2BVerifMethodFromJSON,
    HotmailB2BVerifMethodFromJSONTyped,
    HotmailB2BVerifMethodToJSON,
    HotmailB2BVerifMethodToJSONTyped,
} from './HotmailB2BVerifMethod';

/**
 * A request object to perform an email verification. The `to_email` field is required, all other fields are optional.
 * @export
 * @interface CheckEmailRequest
 */
export interface CheckEmailRequest {
    /**
     * In the SMTP connection, the FROM email address.
     * @type {string}
     * @memberof CheckEmailRequest
     */
    from_email?: string;
    /**
     * The email address to check.
     * @type {string}
     * @memberof CheckEmailRequest
     */
    to_email: string;
    /**
     * In the SMTP connection, the EHLO hostname.
     * @type {string}
     * @memberof CheckEmailRequest
     */
    hello_name?: string;
    /**
     * 
     * @type {CheckEmailInputProxy}
     * @memberof CheckEmailRequest
     */
    proxy?: CheckEmailInputProxy;
    /**
     * SMTP port to use for email validation. Defaults to 25, but 465, 587, and 2525 are sometimes also used.
     * @type {number}
     * @memberof CheckEmailRequest
     */
    smtp_port?: number;
    /**
     * 
     * @type {GmailVerifMethod}
     * @memberof CheckEmailRequest
     */
    gmail_verif_method?: GmailVerifMethod;
    /**
     * 
     * @type {HotmailB2BVerifMethod}
     * @memberof CheckEmailRequest
     */
    hotmailb2b_verif_method?: HotmailB2BVerifMethod;
    /**
     * 
     * @type {HotmailB2CVerifMethod}
     * @memberof CheckEmailRequest
     */
    hotmailb2c_verif_method?: HotmailB2CVerifMethod;
    /**
     * 
     * @type {YahooVerifMethod}
     * @memberof CheckEmailRequest
     */
    yahoo_verif_method?: YahooVerifMethod;
    /**
     * Whether to check if a Gravatar image exists for the given email.
     * @type {boolean}
     * @memberof CheckEmailRequest
     */
    check_gravatar?: boolean;
}



/**
 * Check if a given object implements the CheckEmailRequest interface.
 */
export function instanceOfCheckEmailRequest(value: object): value is CheckEmailRequest {
    if (!('to_email' in value) || value['to_email'] === undefined) return false;
    return true;
}

export function CheckEmailRequestFromJSON(json: any): CheckEmailRequest {
    return CheckEmailRequestFromJSONTyped(json, false);
}

export function CheckEmailRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CheckEmailRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'from_email': json['from_email'] == null ? undefined : json['from_email'],
        'to_email': json['to_email'],
        'hello_name': json['hello_name'] == null ? undefined : json['hello_name'],
        'proxy': json['proxy'] == null ? undefined : CheckEmailInputProxyFromJSON(json['proxy']),
        'smtp_port': json['smtp_port'] == null ? undefined : json['smtp_port'],
        'gmail_verif_method': json['gmail_verif_method'] == null ? undefined : GmailVerifMethodFromJSON(json['gmail_verif_method']),
        'hotmailb2b_verif_method': json['hotmailb2b_verif_method'] == null ? undefined : HotmailB2BVerifMethodFromJSON(json['hotmailb2b_verif_method']),
        'hotmailb2c_verif_method': json['hotmailb2c_verif_method'] == null ? undefined : HotmailB2CVerifMethodFromJSON(json['hotmailb2c_verif_method']),
        'yahoo_verif_method': json['yahoo_verif_method'] == null ? undefined : YahooVerifMethodFromJSON(json['yahoo_verif_method']),
        'check_gravatar': json['check_gravatar'] == null ? undefined : json['check_gravatar'],
    };
}

export function CheckEmailRequestToJSON(json: any): CheckEmailRequest {
    return CheckEmailRequestToJSONTyped(json, false);
}

export function CheckEmailRequestToJSONTyped(value?: CheckEmailRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'from_email': value['from_email'],
        'to_email': value['to_email'],
        'hello_name': value['hello_name'],
        'proxy': CheckEmailInputProxyToJSON(value['proxy']),
        'smtp_port': value['smtp_port'],
        'gmail_verif_method': GmailVerifMethodToJSON(value['gmail_verif_method']),
        'hotmailb2b_verif_method': HotmailB2BVerifMethodToJSON(value['hotmailb2b_verif_method']),
        'hotmailb2c_verif_method': HotmailB2CVerifMethodToJSON(value['hotmailb2c_verif_method']),
        'yahoo_verif_method': YahooVerifMethodToJSON(value['yahoo_verif_method']),
        'check_gravatar': value['check_gravatar'],
    };
}

