/*
Reacher

### What is Reacher?  Reacher is a robust, open-source email verification API service available as both a SaaS and self-hosted solution.

API version: 0.10.0
Contact: amaury@reacher.email
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DebugDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DebugDetails{}

// DebugDetails struct for DebugDetails
type DebugDetails struct {
	// The timestamp when the email verification started.
	StartTime string `json:"start_time"`
	// The timestamp when the email verification ended.
	EndTime string `json:"end_time"`
	Duration Duration `json:"duration"`
	// The name of the server that performed the verification.
	ServerName string `json:"server_name"`
	Smtp DebugDetailsSmtp `json:"smtp"`
}

type _DebugDetails DebugDetails

// NewDebugDetails instantiates a new DebugDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDebugDetails(startTime string, endTime string, duration Duration, serverName string, smtp DebugDetailsSmtp) *DebugDetails {
	this := DebugDetails{}
	this.StartTime = startTime
	this.EndTime = endTime
	this.Duration = duration
	this.ServerName = serverName
	this.Smtp = smtp
	return &this
}

// NewDebugDetailsWithDefaults instantiates a new DebugDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDebugDetailsWithDefaults() *DebugDetails {
	this := DebugDetails{}
	return &this
}

// GetStartTime returns the StartTime field value
func (o *DebugDetails) GetStartTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *DebugDetails) GetStartTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *DebugDetails) SetStartTime(v string) {
	o.StartTime = v
}

// GetEndTime returns the EndTime field value
func (o *DebugDetails) GetEndTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *DebugDetails) GetEndTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *DebugDetails) SetEndTime(v string) {
	o.EndTime = v
}

// GetDuration returns the Duration field value
func (o *DebugDetails) GetDuration() Duration {
	if o == nil {
		var ret Duration
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *DebugDetails) GetDurationOk() (*Duration, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *DebugDetails) SetDuration(v Duration) {
	o.Duration = v
}

// GetServerName returns the ServerName field value
func (o *DebugDetails) GetServerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value
// and a boolean to check if the value has been set.
func (o *DebugDetails) GetServerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerName, true
}

// SetServerName sets field value
func (o *DebugDetails) SetServerName(v string) {
	o.ServerName = v
}

// GetSmtp returns the Smtp field value
func (o *DebugDetails) GetSmtp() DebugDetailsSmtp {
	if o == nil {
		var ret DebugDetailsSmtp
		return ret
	}

	return o.Smtp
}

// GetSmtpOk returns a tuple with the Smtp field value
// and a boolean to check if the value has been set.
func (o *DebugDetails) GetSmtpOk() (*DebugDetailsSmtp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Smtp, true
}

// SetSmtp sets field value
func (o *DebugDetails) SetSmtp(v DebugDetailsSmtp) {
	o.Smtp = v
}

func (o DebugDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DebugDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["start_time"] = o.StartTime
	toSerialize["end_time"] = o.EndTime
	toSerialize["duration"] = o.Duration
	toSerialize["server_name"] = o.ServerName
	toSerialize["smtp"] = o.Smtp
	return toSerialize, nil
}

func (o *DebugDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"start_time",
		"end_time",
		"duration",
		"server_name",
		"smtp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDebugDetails := _DebugDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDebugDetails)

	if err != nil {
		return err
	}

	*o = DebugDetails(varDebugDetails)

	return err
}

type NullableDebugDetails struct {
	value *DebugDetails
	isSet bool
}

func (v NullableDebugDetails) Get() *DebugDetails {
	return v.value
}

func (v *NullableDebugDetails) Set(val *DebugDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableDebugDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableDebugDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDebugDetails(val *DebugDetails) *NullableDebugDetails {
	return &NullableDebugDetails{value: val, isSet: true}
}

func (v NullableDebugDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDebugDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


