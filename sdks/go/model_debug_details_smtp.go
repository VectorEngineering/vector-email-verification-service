/*
Reacher

### What is Reacher?  Reacher is a robust, open-source email verification API service available as both a SaaS and self-hosted solution.

API version: 0.10.0
Contact: amaury@reacher.email
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DebugDetailsSmtp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DebugDetailsSmtp{}

// DebugDetailsSmtp SMTP details used for debugging, including the verification method.
type DebugDetailsSmtp struct {
	VerifMethod *VerifMethod `json:"verif_method,omitempty"`
}

// NewDebugDetailsSmtp instantiates a new DebugDetailsSmtp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDebugDetailsSmtp() *DebugDetailsSmtp {
	this := DebugDetailsSmtp{}
	return &this
}

// NewDebugDetailsSmtpWithDefaults instantiates a new DebugDetailsSmtp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDebugDetailsSmtpWithDefaults() *DebugDetailsSmtp {
	this := DebugDetailsSmtp{}
	return &this
}

// GetVerifMethod returns the VerifMethod field value if set, zero value otherwise.
func (o *DebugDetailsSmtp) GetVerifMethod() VerifMethod {
	if o == nil || IsNil(o.VerifMethod) {
		var ret VerifMethod
		return ret
	}
	return *o.VerifMethod
}

// GetVerifMethodOk returns a tuple with the VerifMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DebugDetailsSmtp) GetVerifMethodOk() (*VerifMethod, bool) {
	if o == nil || IsNil(o.VerifMethod) {
		return nil, false
	}
	return o.VerifMethod, true
}

// HasVerifMethod returns a boolean if a field has been set.
func (o *DebugDetailsSmtp) HasVerifMethod() bool {
	if o != nil && !IsNil(o.VerifMethod) {
		return true
	}

	return false
}

// SetVerifMethod gets a reference to the given VerifMethod and assigns it to the VerifMethod field.
func (o *DebugDetailsSmtp) SetVerifMethod(v VerifMethod) {
	o.VerifMethod = &v
}

func (o DebugDetailsSmtp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DebugDetailsSmtp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VerifMethod) {
		toSerialize["verif_method"] = o.VerifMethod
	}
	return toSerialize, nil
}

type NullableDebugDetailsSmtp struct {
	value *DebugDetailsSmtp
	isSet bool
}

func (v NullableDebugDetailsSmtp) Get() *DebugDetailsSmtp {
	return v.value
}

func (v *NullableDebugDetailsSmtp) Set(val *DebugDetailsSmtp) {
	v.value = val
	v.isSet = true
}

func (v NullableDebugDetailsSmtp) IsSet() bool {
	return v.isSet
}

func (v *NullableDebugDetailsSmtp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDebugDetailsSmtp(val *DebugDetailsSmtp) *NullableDebugDetailsSmtp {
	return &NullableDebugDetailsSmtp{value: val, isSet: true}
}

func (v NullableDebugDetailsSmtp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDebugDetailsSmtp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


