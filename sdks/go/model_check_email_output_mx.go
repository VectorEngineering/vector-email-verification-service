/*
Reacher

### What is Reacher?  Reacher is a robust, open-source email verification API service available as both a SaaS and self-hosted solution.

API version: 0.10.0
Contact: amaury@reacher.email
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CheckEmailOutputMx - Details obtained from querying the mail server's MX records.
type CheckEmailOutputMx struct {
	CoreError *CoreError
	MxDetails *MxDetails
}

// CoreErrorAsCheckEmailOutputMx is a convenience function that returns CoreError wrapped in CheckEmailOutputMx
func CoreErrorAsCheckEmailOutputMx(v *CoreError) CheckEmailOutputMx {
	return CheckEmailOutputMx{
		CoreError: v,
	}
}

// MxDetailsAsCheckEmailOutputMx is a convenience function that returns MxDetails wrapped in CheckEmailOutputMx
func MxDetailsAsCheckEmailOutputMx(v *MxDetails) CheckEmailOutputMx {
	return CheckEmailOutputMx{
		MxDetails: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CheckEmailOutputMx) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CoreError
	err = newStrictDecoder(data).Decode(&dst.CoreError)
	if err == nil {
		jsonCoreError, _ := json.Marshal(dst.CoreError)
		if string(jsonCoreError) == "{}" { // empty struct
			dst.CoreError = nil
		} else {
			if err = validator.Validate(dst.CoreError); err != nil {
				dst.CoreError = nil
			} else {
				match++
			}
		}
	} else {
		dst.CoreError = nil
	}

	// try to unmarshal data into MxDetails
	err = newStrictDecoder(data).Decode(&dst.MxDetails)
	if err == nil {
		jsonMxDetails, _ := json.Marshal(dst.MxDetails)
		if string(jsonMxDetails) == "{}" { // empty struct
			dst.MxDetails = nil
		} else {
			if err = validator.Validate(dst.MxDetails); err != nil {
				dst.MxDetails = nil
			} else {
				match++
			}
		}
	} else {
		dst.MxDetails = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CoreError = nil
		dst.MxDetails = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CheckEmailOutputMx)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CheckEmailOutputMx)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CheckEmailOutputMx) MarshalJSON() ([]byte, error) {
	if src.CoreError != nil {
		return json.Marshal(&src.CoreError)
	}

	if src.MxDetails != nil {
		return json.Marshal(&src.MxDetails)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CheckEmailOutputMx) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CoreError != nil {
		return obj.CoreError
	}

	if obj.MxDetails != nil {
		return obj.MxDetails
	}

	// all schemas are nil
	return nil
}

type NullableCheckEmailOutputMx struct {
	value *CheckEmailOutputMx
	isSet bool
}

func (v NullableCheckEmailOutputMx) Get() *CheckEmailOutputMx {
	return v.value
}

func (v *NullableCheckEmailOutputMx) Set(val *CheckEmailOutputMx) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckEmailOutputMx) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckEmailOutputMx) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckEmailOutputMx(val *CheckEmailOutputMx) *NullableCheckEmailOutputMx {
	return &NullableCheckEmailOutputMx{value: val, isSet: true}
}

func (v NullableCheckEmailOutputMx) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckEmailOutputMx) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


