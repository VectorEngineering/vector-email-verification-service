/*
Reacher

### What is Reacher?  Reacher is a robust, open-source email verification API service available as both a SaaS and self-hosted solution.

API version: 0.10.0
Contact: amaury@reacher.email
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CheckEmailOutputSmtp - Results from connecting to the mail server via SMTP.
type CheckEmailOutputSmtp struct {
	CoreError *CoreError
	SmtpDetails *SmtpDetails
}

// CoreErrorAsCheckEmailOutputSmtp is a convenience function that returns CoreError wrapped in CheckEmailOutputSmtp
func CoreErrorAsCheckEmailOutputSmtp(v *CoreError) CheckEmailOutputSmtp {
	return CheckEmailOutputSmtp{
		CoreError: v,
	}
}

// SmtpDetailsAsCheckEmailOutputSmtp is a convenience function that returns SmtpDetails wrapped in CheckEmailOutputSmtp
func SmtpDetailsAsCheckEmailOutputSmtp(v *SmtpDetails) CheckEmailOutputSmtp {
	return CheckEmailOutputSmtp{
		SmtpDetails: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CheckEmailOutputSmtp) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CoreError
	err = newStrictDecoder(data).Decode(&dst.CoreError)
	if err == nil {
		jsonCoreError, _ := json.Marshal(dst.CoreError)
		if string(jsonCoreError) == "{}" { // empty struct
			dst.CoreError = nil
		} else {
			if err = validator.Validate(dst.CoreError); err != nil {
				dst.CoreError = nil
			} else {
				match++
			}
		}
	} else {
		dst.CoreError = nil
	}

	// try to unmarshal data into SmtpDetails
	err = newStrictDecoder(data).Decode(&dst.SmtpDetails)
	if err == nil {
		jsonSmtpDetails, _ := json.Marshal(dst.SmtpDetails)
		if string(jsonSmtpDetails) == "{}" { // empty struct
			dst.SmtpDetails = nil
		} else {
			if err = validator.Validate(dst.SmtpDetails); err != nil {
				dst.SmtpDetails = nil
			} else {
				match++
			}
		}
	} else {
		dst.SmtpDetails = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CoreError = nil
		dst.SmtpDetails = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CheckEmailOutputSmtp)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CheckEmailOutputSmtp)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CheckEmailOutputSmtp) MarshalJSON() ([]byte, error) {
	if src.CoreError != nil {
		return json.Marshal(&src.CoreError)
	}

	if src.SmtpDetails != nil {
		return json.Marshal(&src.SmtpDetails)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CheckEmailOutputSmtp) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CoreError != nil {
		return obj.CoreError
	}

	if obj.SmtpDetails != nil {
		return obj.SmtpDetails
	}

	// all schemas are nil
	return nil
}

type NullableCheckEmailOutputSmtp struct {
	value *CheckEmailOutputSmtp
	isSet bool
}

func (v NullableCheckEmailOutputSmtp) Get() *CheckEmailOutputSmtp {
	return v.value
}

func (v *NullableCheckEmailOutputSmtp) Set(val *CheckEmailOutputSmtp) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckEmailOutputSmtp) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckEmailOutputSmtp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckEmailOutputSmtp(val *CheckEmailOutputSmtp) *NullableCheckEmailOutputSmtp {
	return &NullableCheckEmailOutputSmtp{value: val, isSet: true}
}

func (v NullableCheckEmailOutputSmtp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckEmailOutputSmtp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


