/*
Reacher

### What is Reacher?  Reacher is a robust, open-source email verification API service available as both a SaaS and self-hosted solution.

API version: 0.10.0
Contact: amaury@reacher.email
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TaskWebhook type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskWebhook{}

// TaskWebhook Optional webhook configuration for sending email verification results during bulk verification.
type TaskWebhook struct {
	OnEachEmail *Webhook `json:"on_each_email,omitempty"`
}

// NewTaskWebhook instantiates a new TaskWebhook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskWebhook() *TaskWebhook {
	this := TaskWebhook{}
	return &this
}

// NewTaskWebhookWithDefaults instantiates a new TaskWebhook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskWebhookWithDefaults() *TaskWebhook {
	this := TaskWebhook{}
	return &this
}

// GetOnEachEmail returns the OnEachEmail field value if set, zero value otherwise.
func (o *TaskWebhook) GetOnEachEmail() Webhook {
	if o == nil || IsNil(o.OnEachEmail) {
		var ret Webhook
		return ret
	}
	return *o.OnEachEmail
}

// GetOnEachEmailOk returns a tuple with the OnEachEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskWebhook) GetOnEachEmailOk() (*Webhook, bool) {
	if o == nil || IsNil(o.OnEachEmail) {
		return nil, false
	}
	return o.OnEachEmail, true
}

// HasOnEachEmail returns a boolean if a field has been set.
func (o *TaskWebhook) HasOnEachEmail() bool {
	if o != nil && !IsNil(o.OnEachEmail) {
		return true
	}

	return false
}

// SetOnEachEmail gets a reference to the given Webhook and assigns it to the OnEachEmail field.
func (o *TaskWebhook) SetOnEachEmail(v Webhook) {
	o.OnEachEmail = &v
}

func (o TaskWebhook) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskWebhook) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OnEachEmail) {
		toSerialize["on_each_email"] = o.OnEachEmail
	}
	return toSerialize, nil
}

type NullableTaskWebhook struct {
	value *TaskWebhook
	isSet bool
}

func (v NullableTaskWebhook) Get() *TaskWebhook {
	return v.value
}

func (v *NullableTaskWebhook) Set(val *TaskWebhook) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskWebhook) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskWebhook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskWebhook(val *TaskWebhook) *NullableTaskWebhook {
	return &NullableTaskWebhook{value: val, isSet: true}
}

func (v NullableTaskWebhook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskWebhook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


