/*
Reacher

### What is Reacher?  Reacher is a robust, open-source email verification API service available as both a SaaS and self-hosted solution.

API version: 0.10.0
Contact: amaury@reacher.email
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SmtpDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmtpDetails{}

// SmtpDetails Results from SMTP connection attempts to the mail server.
type SmtpDetails struct {
	// Indicates if the mail exchanger can be contacted successfully.
	CanConnectSmtp bool `json:"can_connect_smtp"`
	// Indicates if the mailbox is full.
	HasFullInbox bool `json:"has_full_inbox"`
	// Indicates if the email address is a catch-all address.
	IsCatchAll bool `json:"is_catch_all"`
	// Indicates if an email sent to this address is deliverable.
	IsDeliverable bool `json:"is_deliverable"`
	// Indicates if the email address has been disabled by the provider.
	IsDisabled bool `json:"is_disabled"`
}

type _SmtpDetails SmtpDetails

// NewSmtpDetails instantiates a new SmtpDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmtpDetails(canConnectSmtp bool, hasFullInbox bool, isCatchAll bool, isDeliverable bool, isDisabled bool) *SmtpDetails {
	this := SmtpDetails{}
	this.CanConnectSmtp = canConnectSmtp
	this.HasFullInbox = hasFullInbox
	this.IsCatchAll = isCatchAll
	this.IsDeliverable = isDeliverable
	this.IsDisabled = isDisabled
	return &this
}

// NewSmtpDetailsWithDefaults instantiates a new SmtpDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmtpDetailsWithDefaults() *SmtpDetails {
	this := SmtpDetails{}
	return &this
}

// GetCanConnectSmtp returns the CanConnectSmtp field value
func (o *SmtpDetails) GetCanConnectSmtp() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CanConnectSmtp
}

// GetCanConnectSmtpOk returns a tuple with the CanConnectSmtp field value
// and a boolean to check if the value has been set.
func (o *SmtpDetails) GetCanConnectSmtpOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanConnectSmtp, true
}

// SetCanConnectSmtp sets field value
func (o *SmtpDetails) SetCanConnectSmtp(v bool) {
	o.CanConnectSmtp = v
}

// GetHasFullInbox returns the HasFullInbox field value
func (o *SmtpDetails) GetHasFullInbox() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasFullInbox
}

// GetHasFullInboxOk returns a tuple with the HasFullInbox field value
// and a boolean to check if the value has been set.
func (o *SmtpDetails) GetHasFullInboxOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasFullInbox, true
}

// SetHasFullInbox sets field value
func (o *SmtpDetails) SetHasFullInbox(v bool) {
	o.HasFullInbox = v
}

// GetIsCatchAll returns the IsCatchAll field value
func (o *SmtpDetails) GetIsCatchAll() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsCatchAll
}

// GetIsCatchAllOk returns a tuple with the IsCatchAll field value
// and a boolean to check if the value has been set.
func (o *SmtpDetails) GetIsCatchAllOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsCatchAll, true
}

// SetIsCatchAll sets field value
func (o *SmtpDetails) SetIsCatchAll(v bool) {
	o.IsCatchAll = v
}

// GetIsDeliverable returns the IsDeliverable field value
func (o *SmtpDetails) GetIsDeliverable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDeliverable
}

// GetIsDeliverableOk returns a tuple with the IsDeliverable field value
// and a boolean to check if the value has been set.
func (o *SmtpDetails) GetIsDeliverableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDeliverable, true
}

// SetIsDeliverable sets field value
func (o *SmtpDetails) SetIsDeliverable(v bool) {
	o.IsDeliverable = v
}

// GetIsDisabled returns the IsDisabled field value
func (o *SmtpDetails) GetIsDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDisabled
}

// GetIsDisabledOk returns a tuple with the IsDisabled field value
// and a boolean to check if the value has been set.
func (o *SmtpDetails) GetIsDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDisabled, true
}

// SetIsDisabled sets field value
func (o *SmtpDetails) SetIsDisabled(v bool) {
	o.IsDisabled = v
}

func (o SmtpDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmtpDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["can_connect_smtp"] = o.CanConnectSmtp
	toSerialize["has_full_inbox"] = o.HasFullInbox
	toSerialize["is_catch_all"] = o.IsCatchAll
	toSerialize["is_deliverable"] = o.IsDeliverable
	toSerialize["is_disabled"] = o.IsDisabled
	return toSerialize, nil
}

func (o *SmtpDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"can_connect_smtp",
		"has_full_inbox",
		"is_catch_all",
		"is_deliverable",
		"is_disabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSmtpDetails := _SmtpDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSmtpDetails)

	if err != nil {
		return err
	}

	*o = SmtpDetails(varSmtpDetails)

	return err
}

type NullableSmtpDetails struct {
	value *SmtpDetails
	isSet bool
}

func (v NullableSmtpDetails) Get() *SmtpDetails {
	return v.value
}

func (v *NullableSmtpDetails) Set(val *SmtpDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableSmtpDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableSmtpDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmtpDetails(val *SmtpDetails) *NullableSmtpDetails {
	return &NullableSmtpDetails{value: val, isSet: true}
}

func (v NullableSmtpDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmtpDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


