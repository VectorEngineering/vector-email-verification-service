/*
Reacher

### What is Reacher?  Reacher is a robust, open-source email verification API service available as both a SaaS and self-hosted solution.

API version: 0.10.0
Contact: amaury@reacher.email
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CheckEmailRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckEmailRequest{}

// CheckEmailRequest A request object to perform an email verification. The `to_email` field is required, all other fields are optional.
type CheckEmailRequest struct {
	// In the SMTP connection, the FROM email address.
	FromEmail *string `json:"from_email,omitempty"`
	// The email address to check.
	ToEmail string `json:"to_email"`
	// In the SMTP connection, the EHLO hostname.
	HelloName *string `json:"hello_name,omitempty"`
	Proxy *CheckEmailInputProxy `json:"proxy,omitempty"`
	// SMTP port to use for email validation. Defaults to 25, but 465, 587, and 2525 are sometimes also used.
	SmtpPort *float32 `json:"smtp_port,omitempty"`
	GmailVerifMethod *GmailVerifMethod `json:"gmail_verif_method,omitempty"`
	Hotmailb2bVerifMethod *HotmailB2BVerifMethod `json:"hotmailb2b_verif_method,omitempty"`
	Hotmailb2cVerifMethod *HotmailB2CVerifMethod `json:"hotmailb2c_verif_method,omitempty"`
	YahooVerifMethod *YahooVerifMethod `json:"yahoo_verif_method,omitempty"`
	// Whether to check if a Gravatar image exists for the given email.
	CheckGravatar *bool `json:"check_gravatar,omitempty"`
}

type _CheckEmailRequest CheckEmailRequest

// NewCheckEmailRequest instantiates a new CheckEmailRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckEmailRequest(toEmail string) *CheckEmailRequest {
	this := CheckEmailRequest{}
	this.ToEmail = toEmail
	return &this
}

// NewCheckEmailRequestWithDefaults instantiates a new CheckEmailRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckEmailRequestWithDefaults() *CheckEmailRequest {
	this := CheckEmailRequest{}
	return &this
}

// GetFromEmail returns the FromEmail field value if set, zero value otherwise.
func (o *CheckEmailRequest) GetFromEmail() string {
	if o == nil || IsNil(o.FromEmail) {
		var ret string
		return ret
	}
	return *o.FromEmail
}

// GetFromEmailOk returns a tuple with the FromEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckEmailRequest) GetFromEmailOk() (*string, bool) {
	if o == nil || IsNil(o.FromEmail) {
		return nil, false
	}
	return o.FromEmail, true
}

// HasFromEmail returns a boolean if a field has been set.
func (o *CheckEmailRequest) HasFromEmail() bool {
	if o != nil && !IsNil(o.FromEmail) {
		return true
	}

	return false
}

// SetFromEmail gets a reference to the given string and assigns it to the FromEmail field.
func (o *CheckEmailRequest) SetFromEmail(v string) {
	o.FromEmail = &v
}

// GetToEmail returns the ToEmail field value
func (o *CheckEmailRequest) GetToEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToEmail
}

// GetToEmailOk returns a tuple with the ToEmail field value
// and a boolean to check if the value has been set.
func (o *CheckEmailRequest) GetToEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToEmail, true
}

// SetToEmail sets field value
func (o *CheckEmailRequest) SetToEmail(v string) {
	o.ToEmail = v
}

// GetHelloName returns the HelloName field value if set, zero value otherwise.
func (o *CheckEmailRequest) GetHelloName() string {
	if o == nil || IsNil(o.HelloName) {
		var ret string
		return ret
	}
	return *o.HelloName
}

// GetHelloNameOk returns a tuple with the HelloName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckEmailRequest) GetHelloNameOk() (*string, bool) {
	if o == nil || IsNil(o.HelloName) {
		return nil, false
	}
	return o.HelloName, true
}

// HasHelloName returns a boolean if a field has been set.
func (o *CheckEmailRequest) HasHelloName() bool {
	if o != nil && !IsNil(o.HelloName) {
		return true
	}

	return false
}

// SetHelloName gets a reference to the given string and assigns it to the HelloName field.
func (o *CheckEmailRequest) SetHelloName(v string) {
	o.HelloName = &v
}

// GetProxy returns the Proxy field value if set, zero value otherwise.
func (o *CheckEmailRequest) GetProxy() CheckEmailInputProxy {
	if o == nil || IsNil(o.Proxy) {
		var ret CheckEmailInputProxy
		return ret
	}
	return *o.Proxy
}

// GetProxyOk returns a tuple with the Proxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckEmailRequest) GetProxyOk() (*CheckEmailInputProxy, bool) {
	if o == nil || IsNil(o.Proxy) {
		return nil, false
	}
	return o.Proxy, true
}

// HasProxy returns a boolean if a field has been set.
func (o *CheckEmailRequest) HasProxy() bool {
	if o != nil && !IsNil(o.Proxy) {
		return true
	}

	return false
}

// SetProxy gets a reference to the given CheckEmailInputProxy and assigns it to the Proxy field.
func (o *CheckEmailRequest) SetProxy(v CheckEmailInputProxy) {
	o.Proxy = &v
}

// GetSmtpPort returns the SmtpPort field value if set, zero value otherwise.
func (o *CheckEmailRequest) GetSmtpPort() float32 {
	if o == nil || IsNil(o.SmtpPort) {
		var ret float32
		return ret
	}
	return *o.SmtpPort
}

// GetSmtpPortOk returns a tuple with the SmtpPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckEmailRequest) GetSmtpPortOk() (*float32, bool) {
	if o == nil || IsNil(o.SmtpPort) {
		return nil, false
	}
	return o.SmtpPort, true
}

// HasSmtpPort returns a boolean if a field has been set.
func (o *CheckEmailRequest) HasSmtpPort() bool {
	if o != nil && !IsNil(o.SmtpPort) {
		return true
	}

	return false
}

// SetSmtpPort gets a reference to the given float32 and assigns it to the SmtpPort field.
func (o *CheckEmailRequest) SetSmtpPort(v float32) {
	o.SmtpPort = &v
}

// GetGmailVerifMethod returns the GmailVerifMethod field value if set, zero value otherwise.
func (o *CheckEmailRequest) GetGmailVerifMethod() GmailVerifMethod {
	if o == nil || IsNil(o.GmailVerifMethod) {
		var ret GmailVerifMethod
		return ret
	}
	return *o.GmailVerifMethod
}

// GetGmailVerifMethodOk returns a tuple with the GmailVerifMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckEmailRequest) GetGmailVerifMethodOk() (*GmailVerifMethod, bool) {
	if o == nil || IsNil(o.GmailVerifMethod) {
		return nil, false
	}
	return o.GmailVerifMethod, true
}

// HasGmailVerifMethod returns a boolean if a field has been set.
func (o *CheckEmailRequest) HasGmailVerifMethod() bool {
	if o != nil && !IsNil(o.GmailVerifMethod) {
		return true
	}

	return false
}

// SetGmailVerifMethod gets a reference to the given GmailVerifMethod and assigns it to the GmailVerifMethod field.
func (o *CheckEmailRequest) SetGmailVerifMethod(v GmailVerifMethod) {
	o.GmailVerifMethod = &v
}

// GetHotmailb2bVerifMethod returns the Hotmailb2bVerifMethod field value if set, zero value otherwise.
func (o *CheckEmailRequest) GetHotmailb2bVerifMethod() HotmailB2BVerifMethod {
	if o == nil || IsNil(o.Hotmailb2bVerifMethod) {
		var ret HotmailB2BVerifMethod
		return ret
	}
	return *o.Hotmailb2bVerifMethod
}

// GetHotmailb2bVerifMethodOk returns a tuple with the Hotmailb2bVerifMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckEmailRequest) GetHotmailb2bVerifMethodOk() (*HotmailB2BVerifMethod, bool) {
	if o == nil || IsNil(o.Hotmailb2bVerifMethod) {
		return nil, false
	}
	return o.Hotmailb2bVerifMethod, true
}

// HasHotmailb2bVerifMethod returns a boolean if a field has been set.
func (o *CheckEmailRequest) HasHotmailb2bVerifMethod() bool {
	if o != nil && !IsNil(o.Hotmailb2bVerifMethod) {
		return true
	}

	return false
}

// SetHotmailb2bVerifMethod gets a reference to the given HotmailB2BVerifMethod and assigns it to the Hotmailb2bVerifMethod field.
func (o *CheckEmailRequest) SetHotmailb2bVerifMethod(v HotmailB2BVerifMethod) {
	o.Hotmailb2bVerifMethod = &v
}

// GetHotmailb2cVerifMethod returns the Hotmailb2cVerifMethod field value if set, zero value otherwise.
func (o *CheckEmailRequest) GetHotmailb2cVerifMethod() HotmailB2CVerifMethod {
	if o == nil || IsNil(o.Hotmailb2cVerifMethod) {
		var ret HotmailB2CVerifMethod
		return ret
	}
	return *o.Hotmailb2cVerifMethod
}

// GetHotmailb2cVerifMethodOk returns a tuple with the Hotmailb2cVerifMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckEmailRequest) GetHotmailb2cVerifMethodOk() (*HotmailB2CVerifMethod, bool) {
	if o == nil || IsNil(o.Hotmailb2cVerifMethod) {
		return nil, false
	}
	return o.Hotmailb2cVerifMethod, true
}

// HasHotmailb2cVerifMethod returns a boolean if a field has been set.
func (o *CheckEmailRequest) HasHotmailb2cVerifMethod() bool {
	if o != nil && !IsNil(o.Hotmailb2cVerifMethod) {
		return true
	}

	return false
}

// SetHotmailb2cVerifMethod gets a reference to the given HotmailB2CVerifMethod and assigns it to the Hotmailb2cVerifMethod field.
func (o *CheckEmailRequest) SetHotmailb2cVerifMethod(v HotmailB2CVerifMethod) {
	o.Hotmailb2cVerifMethod = &v
}

// GetYahooVerifMethod returns the YahooVerifMethod field value if set, zero value otherwise.
func (o *CheckEmailRequest) GetYahooVerifMethod() YahooVerifMethod {
	if o == nil || IsNil(o.YahooVerifMethod) {
		var ret YahooVerifMethod
		return ret
	}
	return *o.YahooVerifMethod
}

// GetYahooVerifMethodOk returns a tuple with the YahooVerifMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckEmailRequest) GetYahooVerifMethodOk() (*YahooVerifMethod, bool) {
	if o == nil || IsNil(o.YahooVerifMethod) {
		return nil, false
	}
	return o.YahooVerifMethod, true
}

// HasYahooVerifMethod returns a boolean if a field has been set.
func (o *CheckEmailRequest) HasYahooVerifMethod() bool {
	if o != nil && !IsNil(o.YahooVerifMethod) {
		return true
	}

	return false
}

// SetYahooVerifMethod gets a reference to the given YahooVerifMethod and assigns it to the YahooVerifMethod field.
func (o *CheckEmailRequest) SetYahooVerifMethod(v YahooVerifMethod) {
	o.YahooVerifMethod = &v
}

// GetCheckGravatar returns the CheckGravatar field value if set, zero value otherwise.
func (o *CheckEmailRequest) GetCheckGravatar() bool {
	if o == nil || IsNil(o.CheckGravatar) {
		var ret bool
		return ret
	}
	return *o.CheckGravatar
}

// GetCheckGravatarOk returns a tuple with the CheckGravatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckEmailRequest) GetCheckGravatarOk() (*bool, bool) {
	if o == nil || IsNil(o.CheckGravatar) {
		return nil, false
	}
	return o.CheckGravatar, true
}

// HasCheckGravatar returns a boolean if a field has been set.
func (o *CheckEmailRequest) HasCheckGravatar() bool {
	if o != nil && !IsNil(o.CheckGravatar) {
		return true
	}

	return false
}

// SetCheckGravatar gets a reference to the given bool and assigns it to the CheckGravatar field.
func (o *CheckEmailRequest) SetCheckGravatar(v bool) {
	o.CheckGravatar = &v
}

func (o CheckEmailRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckEmailRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FromEmail) {
		toSerialize["from_email"] = o.FromEmail
	}
	toSerialize["to_email"] = o.ToEmail
	if !IsNil(o.HelloName) {
		toSerialize["hello_name"] = o.HelloName
	}
	if !IsNil(o.Proxy) {
		toSerialize["proxy"] = o.Proxy
	}
	if !IsNil(o.SmtpPort) {
		toSerialize["smtp_port"] = o.SmtpPort
	}
	if !IsNil(o.GmailVerifMethod) {
		toSerialize["gmail_verif_method"] = o.GmailVerifMethod
	}
	if !IsNil(o.Hotmailb2bVerifMethod) {
		toSerialize["hotmailb2b_verif_method"] = o.Hotmailb2bVerifMethod
	}
	if !IsNil(o.Hotmailb2cVerifMethod) {
		toSerialize["hotmailb2c_verif_method"] = o.Hotmailb2cVerifMethod
	}
	if !IsNil(o.YahooVerifMethod) {
		toSerialize["yahoo_verif_method"] = o.YahooVerifMethod
	}
	if !IsNil(o.CheckGravatar) {
		toSerialize["check_gravatar"] = o.CheckGravatar
	}
	return toSerialize, nil
}

func (o *CheckEmailRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"to_email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCheckEmailRequest := _CheckEmailRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCheckEmailRequest)

	if err != nil {
		return err
	}

	*o = CheckEmailRequest(varCheckEmailRequest)

	return err
}

type NullableCheckEmailRequest struct {
	value *CheckEmailRequest
	isSet bool
}

func (v NullableCheckEmailRequest) Get() *CheckEmailRequest {
	return v.value
}

func (v *NullableCheckEmailRequest) Set(val *CheckEmailRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckEmailRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckEmailRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckEmailRequest(val *CheckEmailRequest) *NullableCheckEmailRequest {
	return &NullableCheckEmailRequest{value: val, isSet: true}
}

func (v NullableCheckEmailRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckEmailRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


