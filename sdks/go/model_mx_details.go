/*
Reacher

### What is Reacher?  Reacher is a robust, open-source email verification API service available as both a SaaS and self-hosted solution.

API version: 0.10.0
Contact: amaury@reacher.email
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MxDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MxDetails{}

// MxDetails Details about the mail server's MX records.
type MxDetails struct {
	// Indicates if the mail server accepts emails.
	AcceptsMail bool `json:"accepts_mail"`
	// List of Fully Qualified Domain Names (FQDN) of the mail server.
	Records []string `json:"records"`
}

type _MxDetails MxDetails

// NewMxDetails instantiates a new MxDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMxDetails(acceptsMail bool, records []string) *MxDetails {
	this := MxDetails{}
	this.AcceptsMail = acceptsMail
	this.Records = records
	return &this
}

// NewMxDetailsWithDefaults instantiates a new MxDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMxDetailsWithDefaults() *MxDetails {
	this := MxDetails{}
	return &this
}

// GetAcceptsMail returns the AcceptsMail field value
func (o *MxDetails) GetAcceptsMail() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AcceptsMail
}

// GetAcceptsMailOk returns a tuple with the AcceptsMail field value
// and a boolean to check if the value has been set.
func (o *MxDetails) GetAcceptsMailOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AcceptsMail, true
}

// SetAcceptsMail sets field value
func (o *MxDetails) SetAcceptsMail(v bool) {
	o.AcceptsMail = v
}

// GetRecords returns the Records field value
func (o *MxDetails) GetRecords() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value
// and a boolean to check if the value has been set.
func (o *MxDetails) GetRecordsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Records, true
}

// SetRecords sets field value
func (o *MxDetails) SetRecords(v []string) {
	o.Records = v
}

func (o MxDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MxDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accepts_mail"] = o.AcceptsMail
	toSerialize["records"] = o.Records
	return toSerialize, nil
}

func (o *MxDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accepts_mail",
		"records",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMxDetails := _MxDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMxDetails)

	if err != nil {
		return err
	}

	*o = MxDetails(varMxDetails)

	return err
}

type NullableMxDetails struct {
	value *MxDetails
	isSet bool
}

func (v NullableMxDetails) Get() *MxDetails {
	return v.value
}

func (v *NullableMxDetails) Set(val *MxDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableMxDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableMxDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMxDetails(val *MxDetails) *NullableMxDetails {
	return &NullableMxDetails{value: val, isSet: true}
}

func (v NullableMxDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMxDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


