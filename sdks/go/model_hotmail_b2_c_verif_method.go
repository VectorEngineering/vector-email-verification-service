/*
Reacher

### What is Reacher?  Reacher is a robust, open-source email verification API service available as both a SaaS and self-hosted solution.

API version: 0.10.0
Contact: amaury@reacher.email
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// HotmailB2CVerifMethod Enumeration describing the method used to verify Hotmail B2C emails.
type HotmailB2CVerifMethod string

// List of HotmailB2CVerifMethod
const (
	SMTP HotmailB2CVerifMethod = "Smtp"
	HEADLESS HotmailB2CVerifMethod = "Headless"
	API HotmailB2CVerifMethod = "Api"
)

// All allowed values of HotmailB2CVerifMethod enum
var AllowedHotmailB2CVerifMethodEnumValues = []HotmailB2CVerifMethod{
	"Smtp",
	"Headless",
	"Api",
}

func (v *HotmailB2CVerifMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HotmailB2CVerifMethod(value)
	for _, existing := range AllowedHotmailB2CVerifMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HotmailB2CVerifMethod", value)
}

// NewHotmailB2CVerifMethodFromValue returns a pointer to a valid HotmailB2CVerifMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHotmailB2CVerifMethodFromValue(v string) (*HotmailB2CVerifMethod, error) {
	ev := HotmailB2CVerifMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HotmailB2CVerifMethod: valid values are %v", v, AllowedHotmailB2CVerifMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HotmailB2CVerifMethod) IsValid() bool {
	for _, existing := range AllowedHotmailB2CVerifMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HotmailB2CVerifMethod value
func (v HotmailB2CVerifMethod) Ptr() *HotmailB2CVerifMethod {
	return &v
}

type NullableHotmailB2CVerifMethod struct {
	value *HotmailB2CVerifMethod
	isSet bool
}

func (v NullableHotmailB2CVerifMethod) Get() *HotmailB2CVerifMethod {
	return v.value
}

func (v *NullableHotmailB2CVerifMethod) Set(val *HotmailB2CVerifMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableHotmailB2CVerifMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableHotmailB2CVerifMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotmailB2CVerifMethod(val *HotmailB2CVerifMethod) *NullableHotmailB2CVerifMethod {
	return &NullableHotmailB2CVerifMethod{value: val, isSet: true}
}

func (v NullableHotmailB2CVerifMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotmailB2CVerifMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

