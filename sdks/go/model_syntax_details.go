/*
Reacher

### What is Reacher?  Reacher is a robust, open-source email verification API service available as both a SaaS and self-hosted solution.

API version: 0.10.0
Contact: amaury@reacher.email
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SyntaxDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyntaxDetails{}

// SyntaxDetails Validation of the email address syntax.
type SyntaxDetails struct {
	// The domain part of the email address.
	Domain string `json:"domain"`
	// Indicates if the email address syntax is valid.
	IsValidSyntax bool `json:"is_valid_syntax"`
	// The username part of the email address.
	Username string `json:"username"`
}

type _SyntaxDetails SyntaxDetails

// NewSyntaxDetails instantiates a new SyntaxDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntaxDetails(domain string, isValidSyntax bool, username string) *SyntaxDetails {
	this := SyntaxDetails{}
	this.Domain = domain
	this.IsValidSyntax = isValidSyntax
	this.Username = username
	return &this
}

// NewSyntaxDetailsWithDefaults instantiates a new SyntaxDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntaxDetailsWithDefaults() *SyntaxDetails {
	this := SyntaxDetails{}
	return &this
}

// GetDomain returns the Domain field value
func (o *SyntaxDetails) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *SyntaxDetails) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *SyntaxDetails) SetDomain(v string) {
	o.Domain = v
}

// GetIsValidSyntax returns the IsValidSyntax field value
func (o *SyntaxDetails) GetIsValidSyntax() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsValidSyntax
}

// GetIsValidSyntaxOk returns a tuple with the IsValidSyntax field value
// and a boolean to check if the value has been set.
func (o *SyntaxDetails) GetIsValidSyntaxOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsValidSyntax, true
}

// SetIsValidSyntax sets field value
func (o *SyntaxDetails) SetIsValidSyntax(v bool) {
	o.IsValidSyntax = v
}

// GetUsername returns the Username field value
func (o *SyntaxDetails) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *SyntaxDetails) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *SyntaxDetails) SetUsername(v string) {
	o.Username = v
}

func (o SyntaxDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyntaxDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domain"] = o.Domain
	toSerialize["is_valid_syntax"] = o.IsValidSyntax
	toSerialize["username"] = o.Username
	return toSerialize, nil
}

func (o *SyntaxDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain",
		"is_valid_syntax",
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSyntaxDetails := _SyntaxDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSyntaxDetails)

	if err != nil {
		return err
	}

	*o = SyntaxDetails(varSyntaxDetails)

	return err
}

type NullableSyntaxDetails struct {
	value *SyntaxDetails
	isSet bool
}

func (v NullableSyntaxDetails) Get() *SyntaxDetails {
	return v.value
}

func (v *NullableSyntaxDetails) Set(val *SyntaxDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntaxDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntaxDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntaxDetails(val *SyntaxDetails) *NullableSyntaxDetails {
	return &NullableSyntaxDetails{value: val, isSet: true}
}

func (v NullableSyntaxDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntaxDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


