/*
Reacher

### What is Reacher?  Reacher is a robust, open-source email verification API service available as both a SaaS and self-hosted solution.

API version: 0.10.0
Contact: amaury@reacher.email
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MiscDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MiscDetails{}

// MiscDetails Additional information about the email account.
type MiscDetails struct {
	// Indicates if the email address is from a known disposable email provider.
	IsDisposable bool `json:"is_disposable"`
	// Indicates if the email address is a role-based account.
	IsRoleAccount bool `json:"is_role_account"`
	// URL to the Gravatar profile picture associated with the email, if available and requested.
	GravatarUrl *string `json:"gravatar_url,omitempty"`
	// Is this a B2C email address?
	IsB2c bool `json:"is_b2c"`
}

type _MiscDetails MiscDetails

// NewMiscDetails instantiates a new MiscDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMiscDetails(isDisposable bool, isRoleAccount bool, isB2c bool) *MiscDetails {
	this := MiscDetails{}
	this.IsDisposable = isDisposable
	this.IsRoleAccount = isRoleAccount
	this.IsB2c = isB2c
	return &this
}

// NewMiscDetailsWithDefaults instantiates a new MiscDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMiscDetailsWithDefaults() *MiscDetails {
	this := MiscDetails{}
	return &this
}

// GetIsDisposable returns the IsDisposable field value
func (o *MiscDetails) GetIsDisposable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDisposable
}

// GetIsDisposableOk returns a tuple with the IsDisposable field value
// and a boolean to check if the value has been set.
func (o *MiscDetails) GetIsDisposableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDisposable, true
}

// SetIsDisposable sets field value
func (o *MiscDetails) SetIsDisposable(v bool) {
	o.IsDisposable = v
}

// GetIsRoleAccount returns the IsRoleAccount field value
func (o *MiscDetails) GetIsRoleAccount() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsRoleAccount
}

// GetIsRoleAccountOk returns a tuple with the IsRoleAccount field value
// and a boolean to check if the value has been set.
func (o *MiscDetails) GetIsRoleAccountOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsRoleAccount, true
}

// SetIsRoleAccount sets field value
func (o *MiscDetails) SetIsRoleAccount(v bool) {
	o.IsRoleAccount = v
}

// GetGravatarUrl returns the GravatarUrl field value if set, zero value otherwise.
func (o *MiscDetails) GetGravatarUrl() string {
	if o == nil || IsNil(o.GravatarUrl) {
		var ret string
		return ret
	}
	return *o.GravatarUrl
}

// GetGravatarUrlOk returns a tuple with the GravatarUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscDetails) GetGravatarUrlOk() (*string, bool) {
	if o == nil || IsNil(o.GravatarUrl) {
		return nil, false
	}
	return o.GravatarUrl, true
}

// HasGravatarUrl returns a boolean if a field has been set.
func (o *MiscDetails) HasGravatarUrl() bool {
	if o != nil && !IsNil(o.GravatarUrl) {
		return true
	}

	return false
}

// SetGravatarUrl gets a reference to the given string and assigns it to the GravatarUrl field.
func (o *MiscDetails) SetGravatarUrl(v string) {
	o.GravatarUrl = &v
}

// GetIsB2c returns the IsB2c field value
func (o *MiscDetails) GetIsB2c() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsB2c
}

// GetIsB2cOk returns a tuple with the IsB2c field value
// and a boolean to check if the value has been set.
func (o *MiscDetails) GetIsB2cOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsB2c, true
}

// SetIsB2c sets field value
func (o *MiscDetails) SetIsB2c(v bool) {
	o.IsB2c = v
}

func (o MiscDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MiscDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["is_disposable"] = o.IsDisposable
	toSerialize["is_role_account"] = o.IsRoleAccount
	if !IsNil(o.GravatarUrl) {
		toSerialize["gravatar_url"] = o.GravatarUrl
	}
	toSerialize["is_b2c"] = o.IsB2c
	return toSerialize, nil
}

func (o *MiscDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"is_disposable",
		"is_role_account",
		"is_b2c",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMiscDetails := _MiscDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMiscDetails)

	if err != nil {
		return err
	}

	*o = MiscDetails(varMiscDetails)

	return err
}

type NullableMiscDetails struct {
	value *MiscDetails
	isSet bool
}

func (v NullableMiscDetails) Get() *MiscDetails {
	return v.value
}

func (v *NullableMiscDetails) Set(val *MiscDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableMiscDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableMiscDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMiscDetails(val *MiscDetails) *NullableMiscDetails {
	return &NullableMiscDetails{value: val, isSet: true}
}

func (v NullableMiscDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMiscDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


