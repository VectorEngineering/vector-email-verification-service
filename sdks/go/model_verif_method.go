/*
Reacher

### What is Reacher?  Reacher is a robust, open-source email verification API service available as both a SaaS and self-hosted solution.

API version: 0.10.0
Contact: amaury@reacher.email
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VerifMethod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VerifMethod{}

// VerifMethod The method used for email verification.
type VerifMethod struct {
	// The method used for the email verification.
	Type string `json:"type"`
}

type _VerifMethod VerifMethod

// NewVerifMethod instantiates a new VerifMethod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerifMethod(type_ string) *VerifMethod {
	this := VerifMethod{}
	this.Type = type_
	return &this
}

// NewVerifMethodWithDefaults instantiates a new VerifMethod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerifMethodWithDefaults() *VerifMethod {
	this := VerifMethod{}
	return &this
}

// GetType returns the Type field value
func (o *VerifMethod) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VerifMethod) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VerifMethod) SetType(v string) {
	o.Type = v
}

func (o VerifMethod) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VerifMethod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *VerifMethod) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVerifMethod := _VerifMethod{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVerifMethod)

	if err != nil {
		return err
	}

	*o = VerifMethod(varVerifMethod)

	return err
}

type NullableVerifMethod struct {
	value *VerifMethod
	isSet bool
}

func (v NullableVerifMethod) Get() *VerifMethod {
	return v.value
}

func (v *NullableVerifMethod) Set(val *VerifMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableVerifMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableVerifMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerifMethod(val *VerifMethod) *NullableVerifMethod {
	return &NullableVerifMethod{value: val, isSet: true}
}

func (v NullableVerifMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerifMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


