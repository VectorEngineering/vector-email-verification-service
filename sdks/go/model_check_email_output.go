/*
Reacher

### What is Reacher?  Reacher is a robust, open-source email verification API service available as both a SaaS and self-hosted solution.

API version: 0.10.0
Contact: amaury@reacher.email
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CheckEmailOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckEmailOutput{}

// CheckEmailOutput The result of the email verification process.
type CheckEmailOutput struct {
	// The email address that was verified.
	Input string `json:"input"`
	IsReachable Reachable `json:"is_reachable"`
	Misc CheckEmailOutputMisc `json:"misc"`
	Mx CheckEmailOutputMx `json:"mx"`
	Smtp CheckEmailOutputSmtp `json:"smtp"`
	Syntax SyntaxDetails `json:"syntax"`
	Debug *DebugDetails `json:"debug,omitempty"`
}

type _CheckEmailOutput CheckEmailOutput

// NewCheckEmailOutput instantiates a new CheckEmailOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckEmailOutput(input string, isReachable Reachable, misc CheckEmailOutputMisc, mx CheckEmailOutputMx, smtp CheckEmailOutputSmtp, syntax SyntaxDetails) *CheckEmailOutput {
	this := CheckEmailOutput{}
	this.Input = input
	this.IsReachable = isReachable
	this.Misc = misc
	this.Mx = mx
	this.Smtp = smtp
	this.Syntax = syntax
	return &this
}

// NewCheckEmailOutputWithDefaults instantiates a new CheckEmailOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckEmailOutputWithDefaults() *CheckEmailOutput {
	this := CheckEmailOutput{}
	return &this
}

// GetInput returns the Input field value
func (o *CheckEmailOutput) GetInput() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Input
}

// GetInputOk returns a tuple with the Input field value
// and a boolean to check if the value has been set.
func (o *CheckEmailOutput) GetInputOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Input, true
}

// SetInput sets field value
func (o *CheckEmailOutput) SetInput(v string) {
	o.Input = v
}

// GetIsReachable returns the IsReachable field value
func (o *CheckEmailOutput) GetIsReachable() Reachable {
	if o == nil {
		var ret Reachable
		return ret
	}

	return o.IsReachable
}

// GetIsReachableOk returns a tuple with the IsReachable field value
// and a boolean to check if the value has been set.
func (o *CheckEmailOutput) GetIsReachableOk() (*Reachable, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsReachable, true
}

// SetIsReachable sets field value
func (o *CheckEmailOutput) SetIsReachable(v Reachable) {
	o.IsReachable = v
}

// GetMisc returns the Misc field value
func (o *CheckEmailOutput) GetMisc() CheckEmailOutputMisc {
	if o == nil {
		var ret CheckEmailOutputMisc
		return ret
	}

	return o.Misc
}

// GetMiscOk returns a tuple with the Misc field value
// and a boolean to check if the value has been set.
func (o *CheckEmailOutput) GetMiscOk() (*CheckEmailOutputMisc, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Misc, true
}

// SetMisc sets field value
func (o *CheckEmailOutput) SetMisc(v CheckEmailOutputMisc) {
	o.Misc = v
}

// GetMx returns the Mx field value
func (o *CheckEmailOutput) GetMx() CheckEmailOutputMx {
	if o == nil {
		var ret CheckEmailOutputMx
		return ret
	}

	return o.Mx
}

// GetMxOk returns a tuple with the Mx field value
// and a boolean to check if the value has been set.
func (o *CheckEmailOutput) GetMxOk() (*CheckEmailOutputMx, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mx, true
}

// SetMx sets field value
func (o *CheckEmailOutput) SetMx(v CheckEmailOutputMx) {
	o.Mx = v
}

// GetSmtp returns the Smtp field value
func (o *CheckEmailOutput) GetSmtp() CheckEmailOutputSmtp {
	if o == nil {
		var ret CheckEmailOutputSmtp
		return ret
	}

	return o.Smtp
}

// GetSmtpOk returns a tuple with the Smtp field value
// and a boolean to check if the value has been set.
func (o *CheckEmailOutput) GetSmtpOk() (*CheckEmailOutputSmtp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Smtp, true
}

// SetSmtp sets field value
func (o *CheckEmailOutput) SetSmtp(v CheckEmailOutputSmtp) {
	o.Smtp = v
}

// GetSyntax returns the Syntax field value
func (o *CheckEmailOutput) GetSyntax() SyntaxDetails {
	if o == nil {
		var ret SyntaxDetails
		return ret
	}

	return o.Syntax
}

// GetSyntaxOk returns a tuple with the Syntax field value
// and a boolean to check if the value has been set.
func (o *CheckEmailOutput) GetSyntaxOk() (*SyntaxDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Syntax, true
}

// SetSyntax sets field value
func (o *CheckEmailOutput) SetSyntax(v SyntaxDetails) {
	o.Syntax = v
}

// GetDebug returns the Debug field value if set, zero value otherwise.
func (o *CheckEmailOutput) GetDebug() DebugDetails {
	if o == nil || IsNil(o.Debug) {
		var ret DebugDetails
		return ret
	}
	return *o.Debug
}

// GetDebugOk returns a tuple with the Debug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckEmailOutput) GetDebugOk() (*DebugDetails, bool) {
	if o == nil || IsNil(o.Debug) {
		return nil, false
	}
	return o.Debug, true
}

// HasDebug returns a boolean if a field has been set.
func (o *CheckEmailOutput) HasDebug() bool {
	if o != nil && !IsNil(o.Debug) {
		return true
	}

	return false
}

// SetDebug gets a reference to the given DebugDetails and assigns it to the Debug field.
func (o *CheckEmailOutput) SetDebug(v DebugDetails) {
	o.Debug = &v
}

func (o CheckEmailOutput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckEmailOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["input"] = o.Input
	toSerialize["is_reachable"] = o.IsReachable
	toSerialize["misc"] = o.Misc
	toSerialize["mx"] = o.Mx
	toSerialize["smtp"] = o.Smtp
	toSerialize["syntax"] = o.Syntax
	if !IsNil(o.Debug) {
		toSerialize["debug"] = o.Debug
	}
	return toSerialize, nil
}

func (o *CheckEmailOutput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"input",
		"is_reachable",
		"misc",
		"mx",
		"smtp",
		"syntax",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCheckEmailOutput := _CheckEmailOutput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCheckEmailOutput)

	if err != nil {
		return err
	}

	*o = CheckEmailOutput(varCheckEmailOutput)

	return err
}

type NullableCheckEmailOutput struct {
	value *CheckEmailOutput
	isSet bool
}

func (v NullableCheckEmailOutput) Get() *CheckEmailOutput {
	return v.value
}

func (v *NullableCheckEmailOutput) Set(val *CheckEmailOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckEmailOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckEmailOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckEmailOutput(val *CheckEmailOutput) *NullableCheckEmailOutput {
	return &NullableCheckEmailOutput{value: val, isSet: true}
}

func (v NullableCheckEmailOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckEmailOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


