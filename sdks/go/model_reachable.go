/*
Reacher

### What is Reacher?  Reacher is a robust, open-source email verification API service available as both a SaaS and self-hosted solution.

API version: 0.10.0
Contact: amaury@reacher.email
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Reachable An enumeration describing the confidence level that the recipient address is valid: `safe`, `risky`, `invalid`, or `unknown`. Refer to our FAQ for detailed definitions: https://help.reacher.email/email-attributes-inside-json.
type Reachable string

// List of Reachable
const (
	INVALID Reachable = "invalid"
	UNKNOWN Reachable = "unknown"
	SAFE Reachable = "safe"
	RISKY Reachable = "risky"
)

// All allowed values of Reachable enum
var AllowedReachableEnumValues = []Reachable{
	"invalid",
	"unknown",
	"safe",
	"risky",
}

func (v *Reachable) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Reachable(value)
	for _, existing := range AllowedReachableEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Reachable", value)
}

// NewReachableFromValue returns a pointer to a valid Reachable
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReachableFromValue(v string) (*Reachable, error) {
	ev := Reachable(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Reachable: valid values are %v", v, AllowedReachableEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Reachable) IsValid() bool {
	for _, existing := range AllowedReachableEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Reachable value
func (v Reachable) Ptr() *Reachable {
	return &v
}

type NullableReachable struct {
	value *Reachable
	isSet bool
}

func (v NullableReachable) Get() *Reachable {
	return v.value
}

func (v *NullableReachable) Set(val *Reachable) {
	v.value = val
	v.isSet = true
}

func (v NullableReachable) IsSet() bool {
	return v.isSet
}

func (v *NullableReachable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReachable(val *Reachable) *NullableReachable {
	return &NullableReachable{value: val, isSet: true}
}

func (v NullableReachable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReachable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

