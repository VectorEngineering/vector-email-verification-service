/*
Reacher

### What is Reacher?  Reacher is a robust, open-source email verification API service available as both a SaaS and self-hosted solution.

API version: 0.10.0
Contact: amaury@reacher.email
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostV1BulkRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostV1BulkRequest{}

// PostV1BulkRequest struct for PostV1BulkRequest
type PostV1BulkRequest struct {
	// A list of emails to verify.
	Input []string `json:"input"`
	Webhook *TaskWebhook `json:"webhook,omitempty"`
}

type _PostV1BulkRequest PostV1BulkRequest

// NewPostV1BulkRequest instantiates a new PostV1BulkRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostV1BulkRequest(input []string) *PostV1BulkRequest {
	this := PostV1BulkRequest{}
	this.Input = input
	return &this
}

// NewPostV1BulkRequestWithDefaults instantiates a new PostV1BulkRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostV1BulkRequestWithDefaults() *PostV1BulkRequest {
	this := PostV1BulkRequest{}
	return &this
}

// GetInput returns the Input field value
func (o *PostV1BulkRequest) GetInput() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Input
}

// GetInputOk returns a tuple with the Input field value
// and a boolean to check if the value has been set.
func (o *PostV1BulkRequest) GetInputOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Input, true
}

// SetInput sets field value
func (o *PostV1BulkRequest) SetInput(v []string) {
	o.Input = v
}

// GetWebhook returns the Webhook field value if set, zero value otherwise.
func (o *PostV1BulkRequest) GetWebhook() TaskWebhook {
	if o == nil || IsNil(o.Webhook) {
		var ret TaskWebhook
		return ret
	}
	return *o.Webhook
}

// GetWebhookOk returns a tuple with the Webhook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostV1BulkRequest) GetWebhookOk() (*TaskWebhook, bool) {
	if o == nil || IsNil(o.Webhook) {
		return nil, false
	}
	return o.Webhook, true
}

// HasWebhook returns a boolean if a field has been set.
func (o *PostV1BulkRequest) HasWebhook() bool {
	if o != nil && !IsNil(o.Webhook) {
		return true
	}

	return false
}

// SetWebhook gets a reference to the given TaskWebhook and assigns it to the Webhook field.
func (o *PostV1BulkRequest) SetWebhook(v TaskWebhook) {
	o.Webhook = &v
}

func (o PostV1BulkRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostV1BulkRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["input"] = o.Input
	if !IsNil(o.Webhook) {
		toSerialize["webhook"] = o.Webhook
	}
	return toSerialize, nil
}

func (o *PostV1BulkRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"input",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostV1BulkRequest := _PostV1BulkRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostV1BulkRequest)

	if err != nil {
		return err
	}

	*o = PostV1BulkRequest(varPostV1BulkRequest)

	return err
}

type NullablePostV1BulkRequest struct {
	value *PostV1BulkRequest
	isSet bool
}

func (v NullablePostV1BulkRequest) Get() *PostV1BulkRequest {
	return v.value
}

func (v *NullablePostV1BulkRequest) Set(val *PostV1BulkRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostV1BulkRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostV1BulkRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostV1BulkRequest(val *PostV1BulkRequest) *NullablePostV1BulkRequest {
	return &NullablePostV1BulkRequest{value: val, isSet: true}
}

func (v NullablePostV1BulkRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostV1BulkRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


